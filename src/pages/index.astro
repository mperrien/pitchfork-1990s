---
import { Icon } from "astro-icon/components";

import Layout from "../layouts/Layout.astro";
import AlbumCard from "../components/AlbumCard.astro";
import GenreCharts from "../components/GenreCharts.vue";

import type { Album, AlbumInfo, Year, GenresData, Path } from "../types/types";

import { sanitizeForDataAttribute } from "../utils/utils";

import json from '../json/albums.json';

const albums: Album[] = json as Album[];

const emptyAlbum: AlbumInfo = {
	artist: "",
	title: "",
	year: NaN,
	label: "",
	genre: "",
	cover: ""
}

const list1999: AlbumInfo[] = Array(100).fill(emptyAlbum);
const list2003: AlbumInfo[] = Array(100).fill(emptyAlbum);
const list2022: AlbumInfo[] = Array(150).fill(emptyAlbum);

const lines1999: Path[] = [];
const lines2003: Path[] = [];

const labels: { [key: string]: number } = {};

const genres: GenresData = {
	"1999": {
		"Rock": 0,
		"Electronic": 0,
		"Hip Hop": 0,
		"R&B": 0,
		"Other": 0,
	},
	"2003": {
		"Rock": 0,
		"Electronic": 0,
		"Hip Hop": 0,
		"R&B": 0,
		"Other": 0,
	},
	"2022": {
		"Rock": 0,
		"Electronic": 0,
		"Hip Hop": 0,
		"R&B": 0,
		"Other": 0,
	},
	total: {
		"Rock": 0,
		"Electronic": 0,
		"Hip Hop": 0,
		"R&B": 0,
		"Other": 0,
	},
}

const behaviour = {
	"survivors": 0,
	"orphans": 0,
	"comebacks": 0
}

albums.forEach(album => {
	const info: AlbumInfo = {
		artist: album.artist,
		title: album.title,
		year: album.year,
		label: album.label,
		genre: album.genre,
		cover: album.cover
	}

	// Create lists
	if (album["1999"]) {
		list1999[album["1999"] - 1] = info; // Array starts at 0...
	}
	if (album["2003"]) {
		list2003[album["2003"] - 1] = info;
	}
	if (album["2022"]) {
		list2022[album["2022"] - 1] = info;
	}

	// Draw lines
	if (album["1999"] && album["2003"]) {
		lines1999.push({
			sanitized_title: sanitizeForDataAttribute(album.title),
			start: [0, 46 * album["1999"] - 31],
			start_control: [400, 46 * album["1999"] - 31],
			end_control: [275, 46 * album["2003"] - 31],
			end: [675, 46 * album["2003"] - 31]
		});

		if (album["2022"]) {
			behaviour.survivors++;
		}
	}

	if (album["2003"] && album["2022"]) {
		lines2003.push({
			sanitized_title: sanitizeForDataAttribute(album.title),
			start: [0, 46 * album["2003"] - 31],
			start_control: [400, 46 * album["2003"] - 31],
			end_control: [275, 46 * album["2022"] - 31],
			end: [675, 46 * album["2022"] - 31]
		});
	}

	if (album["1999"] && album["2022"] && album["2003"] === null) {
		lines1999.push({
			sanitized_title: sanitizeForDataAttribute(album.title),
			start: [0, 46 * album["1999"] - 31],
			start_control: [400, 46 * album["1999"] - 31],
			end_control: [275, 46 * 170], // Make it go out of bounds
			end: [675, 46 * 170]
		});

		lines2003.push({
			sanitized_title: sanitizeForDataAttribute(album.title),
			start: [0, 46 * 170], // Make it come from out of bounds
			start_control: [400, 46 * 170],
			end_control: [275, 46 * album["2022"] - 31],
			end: [675, 46 * album["2022"] - 31]
		});

		behaviour.comebacks++;
	}

	if (
		(album["1999"] && !album["2003"] && !album["2022"]) ||
		(!album["1999"] && album["2003"] && !album["2022"]) ||
		(!album["1999"] && !album["2003"] && album["2022"])
	){
		behaviour.orphans++;
	}

	// Update labels object
	if (labels[album.label]) {
		labels[album.label]++;
	} else {
		labels[album.label] = 1;
	}

	// Set genres data
	if (album.genre === "rock") {
		genres.total["Rock"]++;
		if (album[1999]) {
			genres[1999].Rock++;
		}
		if (album[2003]) {
			genres[2003].Rock++;
		}
		if (album[2022]) {
			genres[2022].Rock++;
		}
	} else if (album.genre === "electronic") {
		genres.total["Electronic"]++;
		if (album[1999]) {
			genres[1999].Electronic++;
		}
		if (album[2003]) {
			genres[2003].Electronic++;
		}
		if (album[2022]) {
			genres[2022].Electronic++;
		}
	} else if (album.genre === "hiphop") {
		genres.total["Hip Hop"]++;
		if (album[1999]) {
			genres[1999]["Hip Hop"]++;
		}
		if (album[2003]) {
			genres[2003]["Hip Hop"]++;
		}
		if (album[2022]) {
			genres[2022]["Hip Hop"]++;
		}
	} else if (album.genre === "rnb") {
		genres.total["R&B"]++;
		if (album[1999]) {
			genres[1999]["R&B"]++;
		}
		if (album[2003]) {
			genres[2003]["R&B"]++;
		}
		if (album[2022]) {
			genres[2022]["R&B"]++;
		}
	} else if (album.genre === "other") {
		genres.total["Other"]++;
		if (album[1999]) {
			genres[1999].Other++;
		}
		if (album[2003]) {
			genres[2003].Other++;
		}
		if (album[2022]) {
			genres[2022].Other++;
		}
	}
});

// Filter and order labels
const keys: string[] = Object.keys(labels);
keys.forEach(k => {
	if (labels[k] < 5) {
		delete labels[k];
	}
});
const labelsAsArray: [string, number][] = Object.entries(labels);
labelsAsArray.sort((a, b) => {
	return (b[1] - a[1]);
});
---

<Layout title="A Pitchfork History of the 1990s">
	<main>
		<header class="page-header">
			<Icon name="pitchfork" />
			<h1>A Pitchfork History of the 1990s</h1>
			<p>
				<a href="#about">What's thatâ€½</a>
			</p>
		</header>
		<div class="chart">
			<div class="year year--1999">
				<div class="year__year"><span>1999</span></div>
				<ol class="list list--1999">
					{list1999.map((album, index) => (
						<li>
							<AlbumCard album={album} index={index} />
						</li>
					))}
				</ol>
			</div>
			<div class="lines lines-2003" id="lines-2003">
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 675 7406">
					{ lines1999.map(line => (
						<path d={`M${line.start[0]},${line.start[1]} C${line.start_control[0]},${line.start_control[1]} ${line.end_control[0]},${line.end_control[1]} ${line.end[0]},${line.end[1]}`} fill="transparent" stroke="#737476" data-title={line.sanitized_title} />
					))}
				</svg>
			</div>
			<div class="year year--2003">
				<div class="year__year"><span>2003</span></div>
				<ol class="list list--2003">
					{list2003.map((album, index) => (
						<li><AlbumCard album={album} index={index} /></li>
					))}
				</ol>
			</div>
			<div class="lines lines-2022" id="lines-2022">
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 675 7406">
					{ lines2003.map(line => (
						<path d={`M${line.start[0]},${line.start[1]} C${line.start_control[0]},${line.start_control[1]} ${line.end_control[0]},${line.end_control[1]} ${line.end[0]},${line.end[1]}`} fill="transparent" stroke="#737476" data-title={line.sanitized_title} />
					))}
				</svg>
			</div>
			<div class="year year--2022">
				<div class="year__year"><span>2022</span></div>
				<ol class="list list--2022">
					{list2022.map((album, index) => (
						<li><AlbumCard album={album} index={index} reverseInfo={true} /></li>
					))}
				</ol>
			</div>
		</div>
		<section class="genres">
			<div class="container">
				<header>
					<h2>Genres</h2>
					<p>It's not only rock'n'roll (anymore)</p>
				</header>
				<GenreCharts data={genres} client:load />
				<div class="genres__disclaimer">
					<p>
						The albums have been attributed one of the following labels:
					</p>
					<ul>
						<li>Rock: basically anything that involves an electric guitar.</li>
						<li>Electronic: self-explanatory.</li>
						<li>Hip Hop: MCs and beatmakers. And the Beastie Boys...</li>
						<li>R&B: contemporary R&B and neo-soul, mostly.</li>
						<li>Other: folk, country, jazz, alternative pop...</li>
					</ul>
				</div>
			</div>
		</section>
		<section class="labels">
			<div class="container">
				<header>
					<h2>Labels</h2>
					<p>Which labels have ranked the most albums?</p>
				</header>
				<dl>
					{ labelsAsArray.map(label => (
						<div>
							<dt>{label[0]}</dt>
							<div class="labels__bar" data-rows={label[1]}></div>
							<dd>{label[1]}</dd>
						</div>
					))}
				</dl>
				<p class="labels__disclaimer">
					Number of different albums across the three lists. One album being ranked three times only counts for one.<br />
					Labels with less than 5 albums ranked are not displayed.
				</p>
			</div>
		</section>
		<section class="behaviour">
			<div class="container">
				<header>
					<h2>Behaviour</h2>
					<p>Dramatic ascents and surprising falls</p>
				</header>
				<dl>
					<div>
						<dt>Survivors</dt>
						<div
							class="behaviour__circle"
							style={`height: ${behaviour.survivors / 239 * 100}%; width: ${behaviour.survivors / 239 * 100}%`}
						></div>
						<dd>{behaviour.survivors}</dd>
					</div>
					<div>
						<dt>Orphans</dt>
						<div
							class="behaviour__circle"
							style={`height: ${behaviour.orphans / 239 * 100}%; width: ${behaviour.orphans / 239 * 100}%`}
						></div>
						<dd>{behaviour.orphans}</dd>
					</div>
					<div>
						<dt>Comebacks</dt>
						<div
							class="behaviour__circle"
							style={`height: ${behaviour.comebacks / 239 * 100}%; width: ${behaviour.comebacks / 239 * 100}%`}
						></div>
						<dd>{behaviour.comebacks}</dd>
					</div>
				</dl>
				<div class="behaviour__disclaimer">
					<p>
						Survivors are albums that appear in all three lists.
					</p>
					<p>
						Orphans are albums that are present in only one of the three lists.
					</p>
					<p>
						Comebacks are albums that are present in the 1999 and the 2022 lists, but not in the 2003 list.
					</p>
				</div>
			</div>
		</section>
		<section class="controls">
			<div class="container">
				<header>
					<h2>Controls</h2>
				</header>
				<div class="controls__section">
					<h3>Highlight album</h3>
					<p>
						Click an album cover to highlight it in each list. It allows you to scroll to better observe its ranking changes.
					</p>
				</div>
				<div class="controls__section">
					<h3>Highlight albums by genre</h3>
					<p>Are some genres more present depending on the year the list was put together? The albums where volontarily dispatched in three wide genres. <strong>Rock</strong> is basically everything with a guitar, including pop things, from Fugazi to Scott Walker, including Elliott Smith and Blur. <strong>Electronic</strong> groups albums from Aphex Twin and Portishead, and everything in between. <strong>Hip-hop</strong> is rap and R&B, from The Notorious B.I.G. to Janet Jackson.</p>
					<div class="controls__buttons">
						<button class="button" role="button" id="rock">Rock</button>
						<button class="button" role="button" id="electronic">
							Electronic
						</button>
						<button class="button" role="button" id="hiphop">Hip-hop</button>
					</div>
				</div>
				<div class="controls__section">
					<h3>Highlight albums by behaviour</h3>
					<p>With 239 different albums present, the lists are quite unstable. I've sorted the albums into three categories. <strong>Survivors</strong> are albums that are present in the three lists. <strong>Orphans</strong> are albums that only made it to one list. <strong>Comebacks</strong> are albums that are present in the first and last lists, but not in the 2003 list.</p>
					<div class="controls__buttons">
						<button class="button" role="button" id="survivors">
							Survivors
						</button>
						<button class="button" role="button" id="orphans">
							Orphans
						</button>
						<button class="button" role="button" id="comebacks">
							Comebacks
						</button>
					</div>
				</div>
			</div>
		</section>
		<section class="about" id="about">
			<div class="container">
				<header>
					<h2>Music journalists love ranking things.</h2>
					<p class="subtitle">What's thatâ€½</p>
				</header>
				<p>And Pitchfork writers certainly are no exception to the rule. Over the years, Pitchfork has published not one, not two, but three (3) definitive lists of the best albums of the 1990s.</p>
				<ul>
					<li>
						<a href="https://www.listal.com/list/pitchforks-top-100-albums-1990s-mrsaturn" target="_blank" rel="noopener noreferer">Top 100 Favorite Albums of the 1990s</a> was published in 1999 and is not available on Pitchfork anymore;
					</li>
					<li>
						<a href="https://pitchfork.com/features/lists-and-guides/5923-top-100-albums-of-the-1990s/" target="_blank" rel="noopener noreferer">Top 100 Albums of the 1990s</a>, published in 2003;
					</li>
					<li>
						<a href="https://pitchfork.com/features/lists-and-guides/the-best-albums-of-the-1990s/" target="_blank" rel="noopener noreferer">The 150 Best Albums of the 1990s</a>, published in 2022.
					</li>
				</ul>
				<p>This small data visualization tries to show the changes in those lists, and maybe, surface larger trends.</p>
				<p><strong>Disclaimer:</strong> this page is not optimized at all. It will probably make your laptop fans spin like crazy. Maybe I'll work on it one day, maybe I won't...</p>
			</div>
		</section>
	</main>
</Layout>

<script is:inline>
	const albums = document.querySelectorAll("article.album");
	const lines = document.querySelectorAll(".lines svg path");
	albums.forEach(album => {
		album.addEventListener("mouseenter", (event) => {
			const title = event.target.dataset.title;
			lines.forEach(line => {
				if (line.dataset.title === title) {
					line.setAttribute("style", "opacity: 1;");	
				} else {
					line.setAttribute("style", "opacity: 0.2;");
				}
			});

			albums.forEach(al => {
				if (al.dataset.title === title) {
					al.classList.add("album--revealRank");
				}
			});
		});

		album.addEventListener("mouseleave", (event) => {
			lines.forEach(line => {
				line.removeAttribute("style");
			});

			albums.forEach(al => {
				al.classList.remove("album--revealRank");
			});
		});
	});

	const buttons = document.querySelectorAll(".button");
	buttons.forEach(btn => {
		btn.addEventListener("click", (event) => {
			const control = event.target.id;
			highlight(control);
			// if (event.target.)
		})
	})

	function highlight(target) {
		console.log(target)
	}

</script>

<style lang="scss">
.page-header {
	display: flex;
	flex-direction: column;
	align-items: center;

	padding: 10rem 1.6rem 1.6rem;


	svg {
		height: 7.2rem;
		width: auto;
	}

	h1 {
		margin-top: 0;

		font-size: 7.2rem;
		text-align: center;
	}

	a {
		color: var(--pitchfork-red);
		font-size: 2.4rem;
		text-decoration: none;

		&:hover {
			text-decoration: underline;
		}
	}
}

.chart {
	position: relative;

	display: grid;
	grid-template-columns: 8rem 3rem 1fr 3rem 1fr 3rem 8rem;
	height: 700rem;
	width: 160rem;
	margin-left: auto;
	margin-right: auto;
	padding-top: 10rem;


	// overflow-y: hidden;

	&::after {
		content: "";

		position: absolute;
		bottom: 0;
		left: 0;

		display: block;
		height: 6rem;
		width: 100%;

		background-image: linear-gradient(to top, white 0%, white 10%, transparent 100%);
	}

	.year {
		&--1999 {
			grid-column: 2/3;
		}

		&--2003 {
			grid-column: 4/5;
		}

		&--2022 {
			grid-column: 6/7;
		}

		&__year {
			display: flex;
			justify-content: center;
			padding-bottom: 2.4rem;

			font-family: "Lora", sans-serif;
			font-size: 2rem;
			font-weight: 700;
			text-align: center;

		}
	}

	.lines {
		// background-color: #e1e2e3;
		padding-top: 5rem;

		&--2003 {
			grid-column: 3/4;
		}

		&--2022 {
			grid-column: 5/6;
		}

		svg {
			height: 100%;
			width: 100%;

			path {
				opacity: .6;
				stroke-width: 2;

				transition: all .2s ease-in-out;
			}
		}
	}

	.list {
		display: flex;
		flex-direction: column;
		gap: 1.6rem;
		margin: 0;
		padding: 0;

		list-style-type: none;

		&--1999 {
			counter-reset: counter1999;

			li {
				counter-increment: counter1999;

				&::after {
					content: counter(counter1999);
				}
			}
		}

		&--2003 {
			counter-reset: counter2003;

			li {
				counter-increment: counter2003;

				&::after {
					content: counter(counter2003);
				}
			}
		}

		&--2022 {
			counter-reset: counter2022;

			li {
				counter-increment: counter2022;

				&::after {
					content: counter(counter2022);
				}
			}
		}

		li {
			position: relative;

			&::after {
				position: absolute;
				top: calc(50% - 2rem);
				left: -2rem;
				z-index: 9;

				// display: grid;
				display: none;
				place-content: center;
				height: 4rem;
				width: 4rem;

				background-color: rgb(33 34 35 / .8);
				border-radius: 50%;

				color: #f1f2f3;
			}
		}
	}
}

.container {
	margin-right: auto;
	margin-left: auto;
	padding-right: 1.6rem;
	padding-left: 1.6rem;
	width: 100%;
	max-width: 90rem;
}

.genres,
.labels,
.behaviour,
.controls,
.about {
	position: relative;
	z-index: 2;

	padding-top: 7.2rem;
	padding-bottom: 7.2rem;

	font-size: 1.8rem;
	line-height: 1.5;

	header {
		margin-bottom: 4.8rem;

		text-align: center;

		h2 {
			margin: 0;
			font-size: 4.8rem;
		}
	}

	a {
		color: var(--pitchfork-red);
		text-decoration: none;

		&:hover {
			text-decoration: underline;
		}
	}
}

.genres {
	background-color: #f8f8f8;

	dl {
		display: flex;
		justify-content: space-between;
		margin-right: auto;
		margin-left: auto;
		width: 70rem;

		> div {
			position: relative;

			display: flex;
			flex-direction: column-reverse;
			height: 50rem;
		}

		dt,
		dd {
			// position: relative;
			// left: 50%;

			width: 10rem;

			text-align: center;

			transform: translateX(-1.4rem);
		}

		dt {
			// top: 100%;
		}

		dd {
			margin-left: 0;
		}

		.genres__bar {
			width: 7.2rem;

			background-color: var(--pitchfork-red);
			border-radius: .3rem;
		}
	}

	&__disclaimer {
		margin: 6rem auto 0;
		max-width: 45rem;

		opacity: .6;

		font-size: 1.4rem;

		ul {
			padding-left: 1.6rem;
		}
	}
}

.labels {
	background-color: #e1e2e3;

	dl {
		> div + div {
			margin-top: 1.6rem;
		}
		div {
			display: grid;
			align-items: center;
			grid-template-columns: 15rem repeat(12, 1fr) 3rem; // Highest is 12

			dt {
				grid-column: 1/2;
				padding-right: 1.5rem;

				text-align: right;				
			}

			dd {
				margin-left: .6rem;
			}

			.labels__bar {
				grid-column-start: 2;
				height: 3.6rem;

				background-color: var(--pitchfork-red);
				border-radius: .3rem;

				@for $i from 2 through 12 {
					&[data-rows="#{$i}"] {
						grid-column-end: $i + 2;
					}
				}
			}
		}
	}

	&__disclaimer {
		margin-top: 6rem;

		opacity: .6;

		font-size: 1.4rem;
		text-align: center;
	}
}

.behaviour {
	background-color: #f8f8f8;

	.container {
		max-width: 120rem;
	}

	dl {
		display: grid;
		grid-template-columns: repeat(3, 1fr);
		gap: 3rem;

		> div {
			position: relative;

			display: flex;
			flex-direction: column;
			align-items: center;
			justify-content: center;
			gap: 1.6rem;
			aspect-ratio: 1/1;

			// outline: .1rem solid red;
		}

		.behaviour__circle {
			// position: absolute;
			// top: 50%;
			// left: 50%;

			background-color: var(--pitchfork-red);
			border-radius: 50%;

			// transform: translate(-50%, -50%);
		}

		dt {
			font-family: "Lora", sans-serif;
			font-optical-sizing: auto;
			font-size: 2.4rem;
			font-weight: 700;
		}

		dd {
			margin-left: 0;
		}
	}

	&__disclaimer {
		display: grid;
		grid-template-columns: repeat(3, 1fr);
		gap: 3rem;

		p {
			padding: 0 4.8rem;

			opacity: .6;

			font-size: 1.4rem;
			text-align: center;
		}
	}
}

.controls {
	display: none;

	background-color: #f3f4f5;

	.controls__section + .controls__section {
		margin-top: 4.8rem;
	}

	&__buttons {
		display: flex;
		gap: 1.6rem;
	}

	.button {
		padding: .4rem .8rem;

		background-color: #dbddde;
		border: .1rem solid #cfd2d5;
		border-radius: .4rem;
		cursor: pointer;

		// color: var(--pitchfork-red);
		font-size: 2rem;
		font-weight: 500;

		&:hover {
			background-color: #cfd2d5;
		}

		&--active {
			background-color: var(--pitchfork-red) !important;
			border-color: var(--pitchfork-red);
		}
	}
}

.about {
	background-color: rgb(33 34 35 / 1);

	color: #f3f4f5;

	header {
		display: flex;
		flex-direction: column-reverse;

		p {
			color: var(--pitchfork-red);
			font-weight: 700;
			text-transform: uppercase;
		}
	}
}
</style>
