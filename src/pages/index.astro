---
import { Icon } from "astro-icon/components";

import Layout from '../layouts/Layout.astro';
import AlbumCard from '../components/AlbumCard.astro';

import type { Album, AlbumInfo, Path } from "../types/types";

import { sanitizeForDataAttribute } from "../utils/utils";

import json from '../json/albums.json';

const albums: Album[] = json;

const emptyAlbum: AlbumInfo = {
	artist: "",
	title: "",
	year: NaN,
	label: "",
	cover: ""
}

const list1999: AlbumInfo[] = Array(100).fill(emptyAlbum);
const list2003: AlbumInfo[] = Array(100).fill(emptyAlbum);
const list2022: AlbumInfo[] = Array(150).fill(emptyAlbum);

const lines1999: Path[] = [];
const lines2003: Path[] = [];

albums.forEach(album => {
	const info: AlbumInfo = {
		artist: album.artist,
		title: album.title,
		year: album.year,
		label: album.label,
		cover: album.cover
	}

	// Create lists
	if (album["1999"]) {
		list1999[album["1999"] - 1] = info; // Array starts at 0...
	}
	if (album["2003"]) {
		list2003[album["2003"] - 1] = info;
	}
	if (album["2022"]) {
		list2022[album["2022"] - 1] = info;
	}

	// Draw lines
	if (album["1999"] && album["2003"]) {
		lines1999.push({
			sanitized_title: sanitizeForDataAttribute(album.title),
			start: [0, 46 * album["1999"] - 31],
			start_control: [400, 46 * album["1999"] - 31],
			end_control: [275, 46 * album["2003"] - 31],
			end: [675, 46 * album["2003"] - 31]
		});
	}

	if (album["2003"] && album["2022"]) {
		lines2003.push({
			sanitized_title: sanitizeForDataAttribute(album.title),
			start: [0, 46 * album["2003"] - 31],
			start_control: [400, 46 * album["2003"] - 31],
			end_control: [275, 46 * album["2022"] - 31],
			end: [675, 46 * album["2022"] - 31]
		});
	}

	if (album["1999"] && album["2022"] && album["2003"] === null) {
		lines1999.push({
			sanitized_title: sanitizeForDataAttribute(album.title),
			start: [0, 46 * album["1999"] - 31],
			start_control: [400, 46 * album["1999"] - 31],
			end_control: [275, 46 * 170], // Make it go out of bounds
			end: [675, 46 * 170]
		});

		lines2003.push({
			sanitized_title: sanitizeForDataAttribute(album.title),
			start: [0, 46 * 170], // Make it come from out of bounds
			start_control: [400, 46 * 170],
			end_control: [275, 46 * album["2022"] - 31],
			end: [675, 46 * album["2022"] - 31]
		});
	}
})
---

<Layout title="A Pitchfork History of the 1990s">
	<main>
		<header>
			<Icon name="pitchfork" />
			<h1>A Pitchfork History of the 1990s</h1>
		</header>
		<div class="chart">
			<div class="year year--1999">
				<ol class="list list--1999">
					{list1999.map((album, index) => (
						<li>
							<AlbumCard album={album} index={index} />
						</li>
					))}
				</ol>
			</div>
			<div class="lines lines-2003" id="lines-2003">
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 675 7406">
					{ lines1999.map(line => (
						<path d={`M${line.start[0]},${line.start[1]} C${line.start_control[0]},${line.start_control[1]} ${line.end_control[0]},${line.end_control[1]} ${line.end[0]},${line.end[1]}`} fill="transparent" stroke="#737476" data-title={line.sanitized_title} />
					))}
				</svg>
			</div>
			<div class="year year--2003">
				<ol class="list list--2003">
					{list2003.map((album, index) => (
						<li><AlbumCard album={album} index={index} /></li>
					))}
				</ol>
			</div>
			<div class="lines lines-2022" id="lines-2022">
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 675 7406">
					{ lines2003.map(line => (
						<path d={`M${line.start[0]},${line.start[1]} C${line.start_control[0]},${line.start_control[1]} ${line.end_control[0]},${line.end_control[1]} ${line.end[0]},${line.end[1]}`} fill="transparent" stroke="#737476" data-title={line.sanitized_title} />
					))}
				</svg>
			</div>
			<div class="year year--2022">
				<ol class="list list--2022">
					{list2022.map((album, index) => (
						<li><AlbumCard album={album} index={index} reverseInfo={true} /></li>
					))}
				</ol>
			</div>
		</div>
	</main>
</Layout>

<script is:inline>
	const albums = document.querySelectorAll("article.album");
	const lines = document.querySelectorAll(".lines svg path");
	albums.forEach(album => {
		album.addEventListener("mouseenter", (event) => {
			const title = event.target.dataset.title;
			lines.forEach(line => {
				if (line.dataset.title === title) {
					line.setAttribute("style", "opacity: 1;");	
				} else {
					line.setAttribute("style", "opacity: 0.2;");
				}
			});

			albums.forEach(al => {
				if (al.dataset.title === title) {
					al.classList.add("album--revealRank");
				}
			});
		});

		album.addEventListener("mouseleave", (event) => {
			lines.forEach(line => {
				line.removeAttribute("style");
			});

			albums.forEach(al => {
				al.classList.remove("album--revealRank");
			});
		})
	})
</script>

<style lang="scss">
header {
	display: flex;
	flex-direction: column;
	align-items: center;

	padding: 10rem 1.6rem 1.6rem;


	svg {
		height: 7.2rem;
		width: auto;
	}

	h1 {
		margin-top: 0;

		font-size: 7.2rem;
		text-align: center;
	}
}

.chart {
	position: relative;

	display: grid;
	grid-template-columns: 8rem 3rem 1fr 3rem 1fr 3rem 8rem;
	height: 700rem;
	width: 160rem;
	margin-left: auto;
	margin-right: auto;
	padding-top: 10rem;


	overflow: hidden;

	&::after {
		content: "";

		position: absolute;
		bottom: 0;
		left: 0;

		display: block;
		height: 10rem;
		width: 100%;

		background-image: linear-gradient(to top, white 0%, white 10%, transparent 100%);
	}

	.year {
		&--1999 {
			grid-column: 2/3;
		}

		&--2003 {
			grid-column: 4/5;
		}

		&--2022 {
			grid-column: 6/7;
		}
	}

	.lines {
		// background-color: #e1e2e3;

		&--2003 {
			grid-column: 3/4;
		}

		&--2022 {
			grid-column: 5/6;
		}

		svg {
			height: 100%;
			width: 100%;

			path {
				opacity: .6;
				stroke-width: 2;

				transition: all .2s ease-in-out;
			}
		}
	}

	.list {
		display: flex;
		flex-direction: column;
		gap: 1.6rem;
		margin: 0;
		padding: 0;

		list-style-type: none;

		&--1999 {
			counter-reset: counter1999;

			li {
				counter-increment: counter1999;

				&::after {
					content: counter(counter1999);
				}
			}
		}

		&--2003 {
			counter-reset: counter2003;

			li {
				counter-increment: counter2003;

				&::after {
					content: counter(counter2003);
				}
			}
		}

		&--2022 {
			counter-reset: counter2022;

			li {
				counter-increment: counter2022;

				&::after {
					content: counter(counter2022);
				}
			}
		}

		li {
			position: relative;

			&::after {
				position: absolute;
				top: calc(50% - 2rem);
				left: -2rem;
				z-index: 9;

				// display: grid;
				display: none;
				place-content: center;
				height: 4rem;
				width: 4rem;

				background-color: rgb(33 34 35 / .8);
				border-radius: 50%;

				color: #f1f2f3;
			}
		}
	}
}
</style>
